// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  password        String
  name            String
  isEmailVerified Boolean         @default(false)
  emailVerifiedAt DateTime?
  freeQuotaUsed   Int             @default(0)
  freeQuotaLimit  Int             @default(3)
  lastQuotaReset  DateTime        @default(now())
  stripeCustomerId String?        @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  conversations   Conversation[]
  chatMessages    ChatMessage[]
  subscriptions   Subscription[]
  usageTracking   UsageTracking[]
  devices         UserDevice[]
  emailVerifications EmailVerification[]
  passwordResets  PasswordReset[]
  
  @@index([email])
}

model Conversation {
  id            String        @id @default(uuid())
  userId        String?       // null for anonymous
  sessionId     String?       // for anonymous users
  title         String        @default("New Conversation")
  isAnonymous   Boolean       @default(false)
  messageCount  Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  user          User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  session       AnonymousSession? @relation(fields: [sessionId], references: [id])
  messages      ChatMessage[]
  
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
  @@index([updatedAt])
}

model ChatMessage {
  id              String       @id @default(uuid())
  conversationId  String
  userId          String?      // null for anonymous
  sessionId       String?      // for anonymous users
  role            String       // 'user' or 'assistant'
  content         String
  tokens          Int          @default(0)
  language        String       @default("english")
  inputType       String       @default("text") // 'text' or 'voice'
  iterations      Json?        // Array of {generation: string, reflection: string} - only for assistant
  createdAt       DateTime     @default(now())
  
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user            User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  session         AnonymousSession? @relation(fields: [sessionId], references: [id])
  
  @@index([conversationId])
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}

model AnonymousSession {
  id                  String         @id @default(uuid())
  conversationsUsed   Int            @default(0)
  conversationsLimit  Int            @default(3)
  expiresAt           DateTime
  createdAt           DateTime       @default(now())
  
  conversations       Conversation[]
  messages            ChatMessage[]
  
  @@index([expiresAt])
}

model SubscriptionPlan {
  id              String    @id @default(uuid())
  tier            String    @unique // 'Basic', 'Pro', 'Enterprise'
  name            String    // Display name
  maxMessages     Int       // 10, 100, -1 (unlimited)
  monthlyPrice    Float
  yearlyPrice     Float
  features        String    // JSON string of features array
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  subscriptions   Subscription[]
  
  @@index([tier])
  @@index([isActive])
}

model Subscription {
  id              String    @id @default(uuid())
  userId          String
  planId          String?
  tier            String    // 'Basic', 'Pro', 'Enterprise'
  maxMessages     Int       // 10, 100, -1 (unlimited)
  usedMessages    Int       @default(0)
  price           Float
  billingCycle    String    // 'monthly', 'yearly'
  autoRenew       Boolean   @default(true)
  isActive        Boolean   @default(true)
  startDate       DateTime
  endDate         DateTime
  renewalDate     DateTime?
  stripeSubId     String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan            SubscriptionPlan? @relation(fields: [planId], references: [id])
  
  @@index([userId])
  @@index([isActive])
  @@index([renewalDate])
  @@index([planId])
}

model UsageTracking {
  id              String   @id @default(uuid())
  userId          String
  subscriptionId  String?
  messageCount    Int      @default(0)
  tokensUsed      Int      @default(0)
  month           DateTime
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, month])
  @@index([userId])
  @@index([month])
}

model UserDevice {
  id              String   @id @default(uuid())
  userId          String
  deviceId        String
  deviceName      String?  // e.g., "Chrome on Windows", "Safari on iPhone"
  userAgent       String?
  ipAddress       String?
  isTrusted       Boolean  @default(false)
  lastUsedAt      DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, deviceId])
  @@index([userId])
  @@index([deviceId])
  @@index([lastUsedAt])
}

model EmailVerification {
  id              String   @id @default(uuid())
  userId          String
  email           String
  otp             String
  expiresAt       DateTime
  isUsed          Boolean  @default(false)
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([email])
  @@index([otp])
  @@index([expiresAt])
}

model PasswordReset {
  id              String   @id @default(uuid())
  userId          String
  email           String
  otp             String
  expiresAt       DateTime
  isUsed          Boolean  @default(false)
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([email])
  @@index([otp])
  @@index([expiresAt])
}
